directive @auth on FIELD | FIELD_DEFINITION
directive @exp(point: Int) on FIELD | FIELD_DEFINITION

scalar Date
scalar Url

# enum
# enum OrderBy {
#   asc
#   desc
# }

# enum WebtoonOrderByField {
#   title
# }

# enum CollectionOrderByField {
#   title
#   updatedAt
# }

enum Platform {
  NAVER
  DAUM
}

enum CollectionType {
  PRIVATE
  PUBLIC
}

# interface
interface Node {
  id: ID!
}

interface Connection {
  edges: [Edge]
  pageInfo: PageInfo!
  totalCount: Int!
  count: Int!
}

interface Edge {
  cursor: String!
  node: Node
}

# types
type Query {
  authors(first: Int, last: Int, before: ID, after: ID): AuthorsConnection!
  webtoons(first: Int, last: Int, before: ID, after: ID): WebtoonsConnection!
  collections(
    first: Int
    last: Int
    before: ID
    after: ID
    keyword: String
  ): CollectionsConnection!
  genres: [Genre]
  users(first: Int, last: Int, before: ID, after: ID): UsersConnection!
  user(id: ID!): User!
  me: User! @auth
  webtoon(id: ID!): Webtoon!
  randomWebtoons(take: Int = 1): [Webtoon!]
  search(
    keyword: String
    where: SearchFiltering
    webtoonPaging: Paging
    collectionPaging: Paging
  ): SearchResult!
  collection(id: ID!): Collection!
}

type Mutation {
  login(input: LoginInput!): AuthPayload!
  signup(input: SignupInput!): AuthPayload!
  createCollection(input: CreateCollectionInput!): Collection!
    @exp(point: 50)
    @auth
  updateCollection(input: UpdateCollectionInput!): Collection! @auth
  likeCollection(collectionId: ID!): User! @exp(point: 20) @auth
  dislikeCollection(collectionId: ID!): User! @auth
  postComment(input: CommentInput!): Comment! @exp(point: 10) @auth
}

type AuthPayload {
  token: String
  user: User
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type UserStatus {
  commentsCount: Int!
  collectionsCount: Int!
  likedCollectionsCount: Int!
}

type SearchResult {
  webtoonResult: SearchResultWebtoonsConnection
  collectionResult: SearchResultCollectionsConnection
}

# nodes
type Webtoon implements Node {
  id: ID!
  title: String!
  description: String!
  platform: Platform!
  isFinish: Boolean!
  isAdult: Boolean!
  isPay: Boolean!
  thumbnail: Url!
  url: Url!
  authors(first: Int, last: Int, before: ID, after: ID): AuthorsConnection!
  collections(
    first: Int
    last: Int
    before: ID
    after: ID
  ): CollectionsConnection!
  genres: [Genre!]
  comments(first: Int, last: Int, before: ID, after: ID): CommentsConnection!
}

type Author implements Node {
  id: ID!
  name: String!
  webtoons(first: Int, last: Int, before: ID, after: ID): WebtoonsConnection!
}

type Genre {
  code: String!
  name: String!
  webtoons(first: Int, last: Int, before: ID, after: ID): WebtoonsConnection!
}

type Collection implements Node {
  id: ID!
  title: String!
  description: String!
  type: CollectionType!
  webtoons(first: Int, last: Int, before: ID, after: ID): WebtoonsConnection!
  comments(first: Int, last: Int, before: ID, after: ID): CommentsConnection!
  writer: User!
  createdAt: Date!
  updatedAt: Date
}

type User implements Node {
  id: ID!
  email: String!
  name: String!
  password: String!
  level: Int!
  exp: Int!
  status: UserStatus!
  likedCollections(
    first: Int
    last: Int
    before: ID
    after: ID
  ): CollectionsConnection!
  myCollections(
    first: Int
    last: Int
    before: ID
    after: ID
  ): CollectionsConnection! @auth
  comments(first: Int, last: Int, before: ID, after: ID): CommentsConnection!
}

type Comment implements Node {
  id: ID!
  message: String!
  writer: User!
  createdAt: Date!
  comments(first: Int, last: Int, before: ID, after: ID): CommentsConnection!
}

# query connections
type CommentsConnection implements Connection {
  edges: [CommentEdge]
  pageInfo: PageInfo!
  totalCount: Int!
  count: Int!
}

type UsersConnection implements Connection {
  edges: [UserEdge]
  pageInfo: PageInfo!
  totalCount: Int!
  count: Int!
}

type WebtoonsConnection implements Connection {
  edges: [WebtoonEdge]
  pageInfo: PageInfo!
  totalCount: Int!
  count: Int!
}

type CollectionsConnection implements Connection {
  edges: [CollectionEdge]
  pageInfo: PageInfo!
  totalCount: Int!
  count: Int!
}

type AuthorsConnection implements Connection {
  edges: [AuthorEdge]
  pageInfo: PageInfo!
  totalCount: Int!
  count: Int!
}

type SearchResultWebtoonsConnection implements Connection {
  edges: [SearchResultWebtoonsEdge]
  pageInfo: PageInfo!
  totalCount: Int!
  count: Int!
}

type SearchResultCollectionsConnection implements Connection {
  edges: [SearchResultCollectionsEdge]
  pageInfo: PageInfo!
  totalCount: Int!
  count: Int!
}

# edges
type WebtoonEdge implements Edge {
  cursor: String!
  node: Webtoon
}

type CollectionEdge implements Edge {
  cursor: String!
  node: Collection
}

type AuthorEdge implements Edge {
  cursor: String!
  node: Author
}

type UserEdge implements Edge {
  cursor: String!
  node: User
}

type CommentEdge implements Edge {
  cursor: String!
  node: Comment
}

type SearchResultWebtoonsEdge implements Edge {
  cursor: String!
  node: Webtoon
}

type SearchResultCollectionsEdge implements Edge {
  cursor: String!
  node: Collection
}

# input
input SignupInput {
  name: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateCollectionInput {
  title: String!
  description: String!
  webtoonIds: [ID!]!
}

input UpdateCollectionInput {
  collectionId: ID!
  title: String
  description: String
  webtoonIds: [ID!]
}

input CommentInput {
  message: String!
  webtoonId: ID
  collectionId: ID
  commentId: ID
}

input SearchFiltering {
  isPay: Boolean
  isAdult: Boolean
  isFinish: Boolean
  platforms: [Platform!]
  genres: [String]
}

input Paging {
  first: Int
  last: Int
  before: ID
  after: ID
}
