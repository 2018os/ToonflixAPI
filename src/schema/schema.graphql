scalar Date
scalar Url

type Query {
  webtoons(page: Pagination): WebtoonConnection!
  collections(page: Pagination): CollectionConnection!
  webtoon(id: ID!): Webtoon!
  randomWebtoons: [Webtoon!]!
}

type Mutation {
  createCollection(input: CollectionInput): Collection!
}

input Pagination {
  take: Int = 4
  cursor: String
}

input CollectionInput {
  title: String!
  description: String!
  webtoons: [String]!
}

enum Platform {
  NAVER
  DAUM
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type WebtoonEdge {
  cursor: String!
  node: Webtoon
}

type CollectionEdge {
  cursor: String!
  node: Collection
}

type WebtoonConnection {
  edges: [WebtoonEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
}

type CollectionConnection {
  edges: [CollectionEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
}

type Webtoon {
  id: ID!
  title: String!
  description: String!
  platform: Platform!
  isFinish: Boolean!
  isAdult: Boolean!
  isPay: Boolean!
  thumbnail: Url!
  url: Url!
  authors: [Author!]
  genres: [Genre!]
  collections: [Collection]
}

type Author {
  id: ID!
  name: String!
  webtoons: [Webtoon!]!
}

type Genre {
  code: String!
  name: String!
  webtoons: [Webtoon!]!
}

type Collection {
  id: ID!
  title: String!
  description: String!
  webtoons: [Webtoon!]!
  createdAt: Date!
  updatedAt: Date
}
