scalar Date
scalar Url

# enum
enum OrderBy {
  asc
  desc
}

enum WebtoonOrderByField {
  title
}

enum CollectionOrderByField {
  title
  updatedAt
}

enum Platform {
  NAVER
  DAUM
}

# interface
interface Node {
  id: ID!
}

interface QueryConnection {
  edges: [Edge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

interface FieldConnection {
  edges: [Edge]
  pageInfo: PageInfo!
  totalCounts: Int!
}

interface Edge {
  cursor: String!
  node: Node
}

# types
type Query {
  allAuthors: AuthorConnection!
  webtoons(page: Pagination, ordering: WebtoonOrdering): WebtoonConnection!
  collections(
    page: Pagination
    ordering: CollectionOrdering
  ): CollectionConnection!
  webtoon(id: ID!): Webtoon!
  randomWebtoons(take: Int = 1): [Webtoon!]
  search(keyword: String, where: SearchFiltering): SearchResultConnection!
  allGenres: [Genre]
}

type Mutation {
  login(input: LoginInput): AuthPayload!
  signup(input: SignupInput): AuthPayload!
  createCollection(input: CollectionInput): Collection!
}

type AuthPayload {
  token: String
  user: User
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

# nodes
type Webtoon implements Node {
  id: ID!
  title: String!
  description: String!
  platform: Platform!
  isFinish: Boolean!
  isAdult: Boolean!
  isPay: Boolean!
  thumbnail: Url!
  url: Url!
  authorsConnection(page: Pagination): WebtoonAuthorsConnection!
  collectionsConnection(page: Pagination): WebtoonCollectionsConnection!
  genres: [Genre!]
  comments: [Comment]
}

type Author implements Node {
  id: ID!
  name: String!
  webtoonsConnection(page: Pagination): AuthorWebtoonsConnection!
}

type Genre {
  code: String!
  name: String!
  webtoonsConnection(page: Pagination): GenreWebtoonsConnection!
}

type Collection implements Node {
  id: ID!
  title: String!
  description: String!
  webtoonsConnection(page: Pagination): CollectionWebtoonsConnection!
  writer: User!
  createdAt: Date!
  updatedAt: Date
}

type User implements Node {
  id: ID!
  email: String!
  name: String!
  password: String!
  comments: [Comment]
  collections: [Collection]
}

type Comment {
  message: String!
  writer: User!
  writtenWebtoon: Webtoon!
  subComments: [Comment]
}

# query connections
type WebtoonConnection implements QueryConnection {
  edges: [WebtoonEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type CollectionConnection implements QueryConnection {
  edges: [CollectionEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type AuthorConnection implements QueryConnection {
  edges: [AuthorEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

# field connections
type WebtoonAuthorsConnection implements FieldConnection {
  edges: [WebtoonAuthorsEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
}

type WebtoonCollectionsConnection implements FieldConnection {
  edges: [WebtoonCollectionsEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
}

type AuthorWebtoonsConnection implements FieldConnection {
  edges: [AuthorWebtoonsEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
}

type CollectionWebtoonsConnection implements FieldConnection {
  edges: [CollectionWebtoonsEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
}

type GenreWebtoonsConnection implements FieldConnection {
  edges: [GenreWebtoonsEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
}

type SearchResultWebtoonConnection implements FieldConnection {
  edges: [SearchResultWebtoonEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
}

type SearchResultCollectionConnection implements FieldConnection {
  edges: [SearchResultCollectionEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
}

# other connections
type SearchResultConnection {
  webtoonResult(page: Pagination): SearchResultWebtoonConnection
  collectionResult(page: Pagination): SearchResultCollectionConnection
}

# edges
type WebtoonEdge implements Edge {
  cursor: String!
  node: Webtoon
}

type CollectionEdge implements Edge {
  cursor: String!
  node: Collection
}

type AuthorEdge implements Edge {
  cursor: String!
  node: Author
}

type WebtoonAuthorsEdge implements Edge {
  cursor: String!
  node: Author
}

type WebtoonCollectionsEdge implements Edge {
  cursor: String!
  node: Collection
}

type AuthorWebtoonsEdge implements Edge {
  cursor: String!
  node: Webtoon
}

type CollectionWebtoonsEdge implements Edge {
  cursor: String!
  node: Webtoon
}

type GenreWebtoonsEdge implements Edge {
  cursor: String!
  node: Webtoon
}

type SearchResultWebtoonEdge implements Edge {
  cursor: String!
  node: Webtoon
}

type SearchResultCollectionEdge implements Edge {
  cursor: String!
  node: Collection
}

# input
input SignupInput {
  name: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input Pagination {
  take: Int = 4 # first
  cursor: String # after
}

input WebtoonOrdering {
  orderBy: OrderBy = asc
  field: WebtoonOrderByField = title
}

input CollectionOrdering {
  orderBy: OrderBy = asc
  field: CollectionOrderByField = updatedAt
}

input CollectionInput {
  title: String!
  description: String!
  webtoons: [String]!
}

input SearchFiltering {
  isPay: Boolean
  isAdult: Boolean
  isFinish: Boolean
  platforms: [Platform]
  genres: [String]
}
