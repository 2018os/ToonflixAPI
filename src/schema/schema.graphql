scalar Date
scalar Url

# enum
enum OrderBy {
  asc
  desc
}

enum WebtoonOrderByField {
  title
}

enum CollectionOrderByField {
  title
  updatedAt
}

enum Platform {
  NAVER
  DAUM
}

# interface
interface Node {
  id: ID!
}

interface Connection {
  edges: [Edge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

interface Edge {
  cursor: String!
  node: Node
}

# types
type Query {
  authors(first: Int, last: Int, before: ID, after: ID): AuthorConnection!
  webtoons(first: Int, last: Int, before: ID, after: ID): WebtoonConnection!
  collections(
    first: Int
    last: Int
    before: ID
    after: ID
    keyword: String
  ): CollectionConnection!
  genres: [Genre]
  users(first: Int, last: Int, before: ID, after: ID): UserConnection!
  user(id: ID!): User!
  # myProfile(id: ID!): User!
  webtoon(id: ID!): Webtoon!
  randomWebtoons(take: Int = 1): [Webtoon!]
  search(
    keyword: String
    where: SearchFiltering
    webtoonPaging: Paging
    collectionPaging: Paging
  ): SearchResult!
  collection(id: ID!): Collection!
}

type Mutation {
  login(input: LoginInput!): AuthPayload!
  signup(input: SignupInput!): AuthPayload!
  createCollection(input: CollectionInput!): Collection!
  postComment(input: CommentInput!): Comment!
}

type AuthPayload {
  token: String
  user: User
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

# nodes
type Webtoon implements Node {
  id: ID!
  title: String!
  description: String!
  platform: Platform!
  isFinish: Boolean!
  isAdult: Boolean!
  isPay: Boolean!
  thumbnail: Url!
  url: Url!
  authorsConnection(
    first: Int
    last: Int
    before: ID
    after: ID
  ): WebtoonAuthorsConnection!
  collectionsConnection(
    first: Int
    last: Int
    before: ID
    after: ID
  ): WebtoonCollectionsConnection!
  genres: [Genre!]
  commentsConnection(
    first: Int
    last: Int
    before: ID
    after: ID
  ): WebtoonCommentsConnection!
}

type Author implements Node {
  id: ID!
  name: String!
  webtoonsConnection(
    first: Int
    last: Int
    before: ID
    after: ID
  ): AuthorWebtoonsConnection!
}

type Genre {
  code: String!
  name: String!
  webtoonsConnection(
    first: Int
    last: Int
    before: ID
    after: ID
  ): GenreWebtoonsConnection!
}

type Collection implements Node {
  id: ID!
  title: String!
  description: String!
  webtoonsConnection(
    first: Int
    last: Int
    before: ID
    after: ID
  ): CollectionWebtoonsConnection!
  commentsConnection(
    first: Int
    last: Int
    before: ID
    after: ID
  ): CollectionCommentsConnection!
  writer: User!
  createdAt: Date!
  updatedAt: Date
}

type User implements Node {
  id: ID!
  email: String!
  name: String!
  password: String!
  # likedWebtoon
  collectionsConnection(
    first: Int
    last: Int
    before: ID
    after: ID
  ): UserCollectionsConnection!
  commentsConnection(
    first: Int
    last: Int
    before: ID
    after: ID
  ): UserCommentsConnection!
}

type Comment implements Node {
  id: ID!
  message: String!
  writer: User!
  createdAt: Date!
  commentsConnection(
    first: Int
    last: Int
    before: ID
    after: ID
  ): CommentCommentsConnection!
}

# query connections
type UserConnection implements Connection {
  edges: [UserEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type WebtoonConnection implements Connection {
  edges: [WebtoonEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type CollectionConnection implements Connection {
  edges: [CollectionEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type AuthorConnection implements Connection {
  edges: [AuthorEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type WebtoonAuthorsConnection implements Connection {
  edges: [WebtoonAuthorsEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type WebtoonCollectionsConnection implements Connection {
  edges: [WebtoonCollectionsEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type WebtoonCommentsConnection implements Connection {
  edges: [WebtoonCommentsEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type AuthorWebtoonsConnection implements Connection {
  edges: [AuthorWebtoonsEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type CollectionWebtoonsConnection implements Connection {
  edges: [CollectionWebtoonsEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type CollectionCommentsConnection implements Connection {
  edges: [CollectionCommentsEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type GenreWebtoonsConnection implements Connection {
  edges: [GenreWebtoonsEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type SearchResultWebtoonsConnection implements Connection {
  edges: [SearchResultWebtoonsEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type SearchResultCollectionsConnection implements Connection {
  edges: [SearchResultCollectionsEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type UserCollectionsConnection implements Connection {
  edges: [UserCollectionsEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type UserCommentsConnection implements Connection {
  edges: [UserCommentsEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type CommentCommentsConnection implements Connection {
  edges: [CommentCommentsEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

# searchResult
type SearchResult {
  webtoonResult(
    first: Int
    last: Int
    before: ID
    after: ID
  ): SearchResultWebtoonsConnection
  collectionResult(
    first: Int
    last: Int
    before: ID
    after: ID
  ): SearchResultCollectionsConnection
}

# edges
type WebtoonEdge implements Edge {
  cursor: String!
  node: Webtoon
}

type CollectionEdge implements Edge {
  cursor: String!
  node: Collection
}

type AuthorEdge implements Edge {
  cursor: String!
  node: Author
}

type WebtoonAuthorsEdge implements Edge {
  cursor: String!
  node: Author
}

type WebtoonCollectionsEdge implements Edge {
  cursor: String!
  node: Collection
}

type WebtoonCommentsEdge implements Edge {
  cursor: String!
  node: Comment
}

type AuthorWebtoonsEdge implements Edge {
  cursor: String!
  node: Webtoon
}

type CollectionWebtoonsEdge implements Edge {
  cursor: String!
  node: Webtoon
}

type CollectionCommentsEdge implements Edge {
  cursor: String!
  node: Comment
}

type GenreWebtoonsEdge implements Edge {
  cursor: String!
  node: Webtoon
}

type SearchResultWebtoonsEdge implements Edge {
  cursor: String!
  node: Webtoon
}

type SearchResultCollectionsEdge implements Edge {
  cursor: String!
  node: Collection
}

type UserEdge implements Edge {
  cursor: String!
  node: User
}

type UserCollectionsEdge implements Edge {
  cursor: String!
  node: Collection
}

type UserCommentsEdge implements Edge {
  cursor: String!
  node: Comment
}

type CommentCommentsEdge implements Edge {
  cursor: String!
  node: Comment
}

# input
input SignupInput {
  name: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CollectionInput {
  title: String!
  description: String!
  webtoons: [String!]!
}

input CommentInput {
  message: String!
  webtoonId: ID
  collectionId: ID
  commentId: ID
}

input SearchFiltering {
  isPay: Boolean
  isAdult: Boolean
  isFinish: Boolean
  platforms: [Platform]
  genres: [String]
}

input Paging {
  first: Int
  last: Int
  before: ID
  after: ID
}
