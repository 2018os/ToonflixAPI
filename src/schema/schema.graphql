scalar Date
scalar Url

type Query {
  webtoons(page: Pagination, ordering: WebtoonOrdering): WebtoonConnection!
  collections(
    page: Pagination
    ordering: CollectionOrdering
  ): CollectionConnection!
  webtoon(id: ID!): Webtoon!
  randomWebtoons(take: Int = 1): [Webtoon!]
  search(keyword: String, where: SearchFiltering): SearchResultConnection!
}

type Mutation {
  login(input: LoginInput): AuthPayload!
  signup(input: SignupInput): AuthPayload!
  createCollection(input: CollectionInput): Collection!
}

input SignupInput {
  name: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input Pagination {
  take: Int = 4
  cursor: String
}

input WebtoonOrdering {
  orderBy: OrderBy = asc
  field: WebtoonOrderByField = title
}

input CollectionOrdering {
  orderBy: OrderBy = asc
  field: CollectionOrderByField = updatedAt
}

input CollectionInput {
  title: String!
  description: String!
  webtoons: [String]!
}

enum OrderBy {
  asc
  desc
}

enum WebtoonOrderByField {
  title
}

enum CollectionOrderByField {
  title
  updatedAt
}

enum Platform {
  NAVER
  DAUM
}

type AuthPayload {
  token: String
  user: User
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type WebtoonEdge {
  cursor: String!
  node: Webtoon
}

type CollectionEdge {
  cursor: String!
  node: Collection
}

# interface Connection {
#   pageInfo: PageInfo!
#   totalCounts: Int!
# }
# ref: https://github.com/apollographql/apollo-server/issues/1075

type WebtoonConnection {
  edges: [WebtoonEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type CollectionConnection {
  edges: [CollectionEdge]
  pageInfo: PageInfo!
  totalCounts: Int!
  counts: Int!
}

type SearchResultConnection {
  webtoonResult: WebtoonConnection
  collectionResult: CollectionConnection
}

input SearchFiltering {
  isPay: Boolean
  isAdult: Boolean
  isFinish: Boolean
  platforms: [Platform]
  genres: [String]
}

type Webtoon {
  id: ID!
  title: String!
  description: String!
  platform: Platform!
  isFinish: Boolean!
  isAdult: Boolean!
  isPay: Boolean!
  thumbnail: Url!
  url: Url!
  authors: [Author!]
  genres: [Genre!]
  collections: [Collection]
  comments: [Comment]
  # collections(take: int): WebtoonCollectionConnection!
}

type Author {
  id: ID!
  name: String!
  webtoons: [Webtoon!]!
}

type Genre {
  code: String!
  name: String!
  webtoons: [Webtoon!]!
}

type Collection {
  id: ID!
  title: String!
  description: String!
  webtoons: [Webtoon!]!
  writer: User!
  createdAt: Date!
  updatedAt: Date
}

type User {
  id: ID!
  email: String!
  name: String!
  password: String!
  comments: [Comment]
  collections: [Collection]
}

type Comment {
  message: String!
  writer: User!
  writtenWebtoon: Webtoon!
  subComments: [Comment]
}
